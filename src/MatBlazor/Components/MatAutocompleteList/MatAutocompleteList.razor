@namespace MatBlazor
@typeparam ItemType
@inherits BaseMatAutocompleteList<ItemType>
@using System
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.Timers

<div class="@WrapperClassMapper.AsString()">
    <MatTextField OnFocus="@OpenPopup"
                  ValidationDisabled="true"
                  HideClearButton="true"
                  FullWidth="@FullWidth"
                  OnFocusOut="@ClosePopup"
                  Label="@Label"
                  Value=@StringValue
                  OnInput="@OnValueChanging"
                  OnKeyDown="@OnKeyDown"
                  OnKeyUp="@OnKeyUp"
                  Outlined="@Outlined"
                  Attributes="@Attributes"
                  InputClass="mdc-autocomplete"
                  Id="@Id"
                  Class="@(FieldClass?.Contains("invalid") == true ? "mdc-text-field--invalid" : string.Empty)" />
    @if (HelperText != null && FieldClass?.Contains("invalid") != true)
    {
        <div class="mdc-text-field-helper-line">
            <div class="@HelperTextClassMapper.AsString()" aria-hidden="@(!HelperTextPersistent)">@HelperText</div>
        </div>
    }
    @if (For != null)
    {
        <div class="mdc-text-field-helper-line">
            <MatValidationMessage Id="@ValidationMessageId" For="@For" ForId="@Id" />
        </div>
    }
    @if (IsShowingClearButton && IconOnClick.HasDelegate)
    {
        <div class="mat-autocomplete-list-clearbutton mat-autocomplete-list-lookup-clear-button">
            <MatIconButton Id="@($"clear-button-{Id}")" Icon="clear" OnClick="@ClearText" />
        </div>
    }
    @if (IsShowingClearButton && !IconOnClick.HasDelegate)
    {
        <div class="mat-autocomplete-list-clearbutton">
            <MatIconButton Id="@($"clear-button-{Id}")" Icon="clear" OnClick="@ClearText" />
        </div>
    }
    @if (IconOnClick.HasDelegate)
    {
        <div class="mat-autocomplete-list-clearbutton">
            <MatIconButton Id="@($"icon-button-{Id}")" Icon="@Icon" OnClick="@IconOnClick" />
        </div>
    }
    @if (IsOpened)
    {
        <MatList @ref="ListRef" SingleSelection="true" Class="mat-elevation-z7 custom-autocomplete" Id="@($"list-{Id}")">
            @foreach (var elementWrapper in GetFilteredCollection(StringValue))
            {
                <MatListItem OnMouseDown="@(() => OnItemClicked(elementWrapper.Item))">
                    @if (ItemTemplate != null)
                    {
                        @ItemTemplate(elementWrapper.Item)
                    }
                    else
                    {
                        <MatListItemText>@(elementWrapper.StringValue)</MatListItemText>
                    }
                </MatListItem>
            }
        </MatList>
    }
</div>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnEnter { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> IconOnClick { get; set; }

    [Parameter]
    public Expression<Func<ItemType>> For { get; set; }

    [Parameter]
    public bool SubmitOnEnter { get; set; }

    public IList<ItemType> ExpandedItems { get; set; } = new List<ItemType>();

    [Parameter]
    public EventCallback<IList<ItemType>> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [Parameter]
    public EventCallback<ItemType> OnItemSelect { get; set; }
    
    private string ComputeStringValue(ItemType obj)
    {
        Func<ItemType, string> customStringSelector = this.StringSelector;
        return (customStringSelector != null ? customStringSelector(obj) : (string)string.Empty);
    }

    protected void OnValueChanging(ChangeEventArgs args)
    {
        StringValue = args.Value as string;
    }

    protected async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && typeof(ItemType) == typeof(string) && SubmitOnEnter)
        {
            await OnEnter.InvokeAsync(null);
            Items = new List<ItemType>();
        }
    }

    protected void OnItemClicked(ItemType selectedObject)
    {
        ItemClicked(selectedObject);
    }
}