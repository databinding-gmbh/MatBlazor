@namespace MatBlazor
@typeparam ItemType
@typeparam TSearchModel
@typeparam TValue
@inherits BaseMatAutocompleteList<ItemType>
@using System
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms

<div class="@WrapperClassMapper.AsString()">
    <MatTextField OnFocus="@OpenPopup"
                  ValidationDisabled="true"
                  HideClearButton="true"
                  FullWidth="@FullWidth"
                  OnFocusOut="@ClosePopup"
                  Label="@Label"
                  ValueChanged="OnTextChanged"
                  Value=@StringValue
                  OnInput="@OnValueChanging"
                  OnKeyDown="@OnKeyDown"
                  OnKeyUp="@OnKeyUp"
                  Outlined="@Outlined"
                  Attributes="@Attributes"
                  InputClass="mdc-autocomplete"
                  Id="@Id"
                  Class="@(FieldClass?.Contains("invalid") == true ? "mdc-text-field--invalid" : string.Empty)"
                  ValueExpression="@(() => StringValue)" />
    @if (HelperText != null && FieldClass?.Contains("invalid") != true)
    {
        <div class="mdc-text-field-helper-line">
            <div class="@HelperTextClassMapper.AsString()" aria-hidden="@(!HelperTextPersistent)">@HelperText</div>
        </div>
    }
    @if (For != null)
    {
        <div class="mdc-text-field-helper-line">
            <MatValidationMessage Id="@ValidationMessageId" For="@For" ForId="@Id" />
        </div>
    }
    @if (IsShowingClearButton && (IconOnClick.HasDelegate || HasLookup))
    {
        <div class="mat-autocomplete-list-clearbutton mat-autocomplete-list-lookup-clear-button">
            <MatIconButton Id="@($"clear-button-{Id}")" Icon="clear" OnClick="@ClearText" />
        </div>
    }
    @if (IsShowingClearButton && !IconOnClick.HasDelegate && !HasLookup)
    {
        <div class="mat-autocomplete-list-clearbutton">
            <MatIconButton Id="@($"clear-button-{Id}")" Icon="clear" OnClick="@ClearText" />
        </div>
    }
    @if (HasLookup)
    {
        <div class="mat-autocomplete-list-clearbutton">
            <MatIconButton Id="@($"search-button-{Id}")" Icon="search" OnClick="@OnSearchIconClick" />
        </div>
    }
    @if (IconOnClick.HasDelegate)
    {
        <div class="mat-autocomplete-list-clearbutton">
            <MatIconButton Id="@($"icon-button-{Id}")" Icon="@Icon" OnClick="@IconOnClick" />
        </div>
    }
    @if (IsOpened)
    {
        <MatList @ref="ListRef" SingleSelection="true" Class="mat-elevation-z7 custom-autocomplete" Id="@($"list-{Id}")">
            @foreach (var elementWrapper in GetFilteredCollection(StringValue))
            {
                <MatListItem OnMouseDown="@(async() => await OnItemClicked(elementWrapper.Item))">
                    @if (ItemTemplate != null)
                    {
                        @ItemTemplate(elementWrapper.Item)
                    }
                    else
                    {
                        <MatListItemText>@(elementWrapper.StringValue)</MatListItemText>
                    }
                </MatListItem>
            }
        </MatList>
    }
</div>
<MatDialog @bind-IsOpen="@IsOpen" Class="lookup-dialog">
    <MatDialogContent>
        <div class="col s12">
            <h5>@Label</h5>
        </div>
        <EditForm Model="@SearchModel" OnValidSubmit="@(async () => await OnSearchClickAsync())" class="lookup-search">
            @SearchSection
            <div class="col s12">
                <MatButton OnClick="@(async () => await OnSearchClick.InvokeAsync(null))"
                           Raised="true"
                           Class="right">
                    Suchen
                </MatButton>
            </div>
        </EditForm>
        <div class="row">
            @if (SearchList != null)
            {
                <div class="col s12">
                    <MatList SingleSelection="true" Id="@($"lookup-list-{Id}")">
                        @foreach (var item in SearchList)
                        {
                            <MatListItem OnClick="@(async() => await ItemClickAsync(item))">
                                <MatListItemText>
                                    <p>@ComputeStringValue(item)</p>
                                </MatListItemText>
                            </MatListItem>
                        }
                        @if (IsShowNew)
                        {
                            <MatListItem OnClick="@(async() => await ItemClickAsync(New))">
                                <MatListItemText>
                                    <p>@NewItemSection (Auswählen um neues Objekt erstellen)</p>
                                </MatListItemText>
                            </MatListItem>
                        }
                    </MatList>
                </div>
            }
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { IsOpen = false; })"
                   Type="button">
            Abbrechen
        </MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnEnter { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> IconOnClick { get; set; }

    [Parameter]
    public Expression<Func<ItemType>> For { get; set; }

    [Parameter]
    public bool SubmitOnEnter { get; set; }

    [Parameter]
    public RenderFragment NewItemSection { get; set; }
    
    [Parameter]
    public bool HasLookup { get; set; }

    [Parameter]
    public bool IsShowNew { get; set; }

    private ItemType _new;

    [Parameter]
    public ItemType New
    {
        get => _new;
        set
        {
            if (EqualityComparer<ItemType>.Default.Equals(_new, value)) return;
            _new = value;
            NewChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<ItemType> NewChanged { get; set; }

    private bool _isOpen;

    [Parameter]
    public bool IsOpen
    {
        get => _isOpen;
        set
        {
            if (_isOpen == value) return;
            _isOpen = value;
            if (OnOpen.HasDelegate)
            {
                OnOpen.InvokeAsync(null);
            }
            OnSearchClick.InvokeAsync(null);
            IsOpenChanged.InvokeAsync(_isOpen);
        }
    }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private TSearchModel _searchModel = default(TSearchModel);

    [Parameter]
    public TSearchModel SearchModel
    {
        get => _searchModel;
        set
        {
            if (EqualityComparer<TSearchModel>.Default.Equals(_searchModel, value)) return;
            _searchModel = value;
            SearchModelChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<TSearchModel> SearchModelChanged { get; set; }

    private IEnumerable<ItemType> _searchList;

    [Parameter]
    public IEnumerable<ItemType> SearchList
    {
        get => _searchList;
        set
        {
            if (EqualityComparer<IEnumerable<ItemType>>.Default.Equals(_searchList, value)) return;
            _searchList = value;
            SearchListChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<ItemType>> SearchListChanged { get; set; }

    public IList<ItemType> ExpandedItems { get; set; } = new List<ItemType>();

    [Parameter]
    public bool DisableLookUp { get; set; }

    [Parameter]
    public EventCallback<IList<ItemType>> ItemsChanged { get; set; }

    [Parameter]
    public RenderFragment SearchSection { get; set; }

    [Parameter]
    public EventCallback OnSearchClick { get; set; }

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [Parameter]
    public EventCallback<ItemType> OnItemSelect { get; set; }

    protected async Task OnSearchClickAsync()
    {
        await OnSearchClick.InvokeAsync(null);
    }

    protected async Task ItemClickAsync(ItemType value)
    {
        if (Items.All(x => ComputeStringValue(x) != ComputeStringValue(value)))
        {
            Items.Add(value);
        }

        await OnItemSelect.InvokeAsync(value);

        IsOpen = false;
    }

    private string ComputeStringValue(ItemType obj)
    {
        Func<ItemType, string> customStringSelector = this.StringSelector;
        return (customStringSelector != null ? customStringSelector(obj) : (string)string.Empty);
    }

    protected void OnSearchIconClick(MouseEventArgs args)
    {
        IsOpen = true;
    }

    public bool IsSearching { get; set; }

    protected async Task OnValueChanging(ChangeEventArgs args)
    {
        if (!IsSearching)
        {
            IsSearching = true;

            this.OnValueChanged(args);

            if (typeof(ItemType) == typeof(string))
            {
                Value = (ItemType)args.Value;
            }

            await Task.Delay(100);

            IsSearching = false;
        }
    }

    protected async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && typeof(ItemType) == typeof(string) && SubmitOnEnter)
        {
            await OnEnter.InvokeAsync(null);
            Items = new List<ItemType>();
        }
    }

    protected async Task OnItemClicked(ItemType selectedObject)
    {
        ItemClicked(selectedObject);
    }
}